<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
      xmlns:jms="http://www.springframework.org/schema/cache"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/lang
		http://www.springframework.org/schema/lang/spring-lang-3.1.xsd
      http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util-2.0.xsd
   http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
 <!-- http://www.springframework.org/schema/jms
    http://www.springframework.org/schema/jms/spring-jms-4.3.xsd">-->

   <!-- http://www.springframework.org/schema/jms
    http://www.springframework.org/schema/jms/spring-jms-4.3.xsd">-->
    <context:annotation-config/>
    <!--<context:property-placeholder location="classpath:config.properties"  />-->
    <!-- 第三方MQ工厂: ConnectionFactory -->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <!-- ActiveMQ Address -->
        <property name="brokerURL" value="tcp://localhost:61616"/>
        <property name="userName" value="admin"/>
        <property name="password" value="admin"/>
    </bean>
      <bean id="jmsConnectionFactoryExtend" class="org.springframework.jms.connection.CachingConnectionFactory">
          <constructor-arg ref="targetConnectionFactory" />
          <property name="sessionCacheSize" value="100" />
      </bean>
    <!--
        ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory
        可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗,要依赖于 activemq-pool包
     -->
    <!--<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">-->
        <!--<property name="connectionFactory" ref="targetConnectionFactory" />-->
        <!--<property name="maxConnections" value="100" />-->
    <!--</bean>-->

    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <!--<bean id="singleConnectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">-->
        <!--&lt;!&ndash; 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory &ndash;&gt;-->
        <!--<property name="targetConnectionFactory" ref="pooledConnectionFactory" />-->
    <!--</bean>-->
    <!-- 消息处理器 -->
    <!-- <bean id="jmsMessageConverter" class="org.springframework.jms.support.converter.SimpleMessageConverter" />
     <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
         <constructor-arg ref="jmsConnectionFactoryExtend" />
         &lt;!&ndash; 非pub/sub模型（发布/订阅），即队列模式 &ndash;&gt;
         <property name="pubSubDomain" value="false" />
         <property name="messageConverter" ref="jmsMessageConverter"></property>
     </bean>
     <bean id="jmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">
         <property name="connectionFactory" ref="jmsConnectionFactoryExtend"/>
     </bean>-->
    <!-- 监听注解支持 -->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg index="0" value="queue1" />
        <!--    <value>test3.topic,test2.topic</value>
        </constructor-arg>-->
    </bean>
    <!--<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">-->
        <!--<constructor-arg>-->
            <!--<value>topic</value>-->
        <!--</constructor-arg>-->
    <!--</bean>-->
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <!-- 队列模板 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="jmsConnectionFactoryExtend"/>
        <property name="defaultDestination" ref="queueDestination" />
    </bean>
    <!-- <bean  class=" excelTools.activemq.PromoteActProducerServiceImpl">
         &lt;!&ndash; 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 &ndash;&gt;
         <property name="jmsTemplate" ref="jmsTemplate"/>
     </bean>-->
    <!-- <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
         <constructor-arg>
             <value>test.queue</value>
         </constructor-arg>
     </bean>
     <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
         <constructor-arg>
             <value>test.topic</value>
         </constructor-arg>
     </bean>-->
    <!-- 消息监听器 -->
    <bean id="consumerMessageListener"
          class="excelTools.PromoteActConsumer" />
    <!--消息监听容器 -->
    <bean id="jmsContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsConnectionFactoryExtend" />
        <property name="destination" ref="queueDestination" />
        <property name="messageListener" ref="consumerMessageListener" />
    </bean>
   <!-- <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"></property>
        <property name="userName" value="admin"></property>
        <property name="password" value="admin"></property>
    </bean>
    <bean id="jmsConnectionFactoryExtend" class="org.springframework.jms.connection.CachingConnectionFactory">
        <constructor-arg ref="targetConnectionFactory" />
        <property name="sessionCacheSize" value="100" />
    </bean>
   &lt;!&ndash; <amp:connectionFactory id="jmsConnectionFactory" brokerURL="tcp://localhost:61616" userName="admin" password="admin" />
      <bean id="jmsConnectionFactoryExtend" class="org.springframework.jms.connection.CachingConnectionFactory">
    <constructor-arg ref="jmsConnectionFactory" />
    <property name="sessionCacheSize" value="100" />
</bean>&ndash;&gt;
    &lt;!&ndash; 消息处理器 &ndash;&gt;
    <bean id="jmsMessageConverter" class="org.springframework.jms.support.converter.SimpleMessageConverter" />

    &lt;!&ndash; ====Producer side start==== &ndash;&gt;
    &lt;!&ndash; 定义JmsTemplate的Queue类型 &ndash;&gt;
    <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
        <constructor-arg ref="jmsConnectionFactoryExtend" />
        &lt;!&ndash; 非pub/sub模型（发布/订阅），即队列模式 &ndash;&gt;
        <property name="pubSubDomain" value="false" />
        <property name="messageConverter" ref="jmsMessageConverter"></property>
    </bean>

    &lt;!&ndash; 定义JmsTemplate的Topic类型 &ndash;&gt;
   &lt;!&ndash; <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
        <constructor-arg ref="jmsConnectionFactoryExtend" />
        &lt;!&ndash; pub/sub模型（发布/订阅） &ndash;&gt;
        <property name="pubSubDomain" value="true" />
        <property name="messageConverter" ref="jmsMessageConverter"></property>
    </bean>&ndash;&gt;
    <bean id="jmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">
        <property name="connectionFactory" ref="jmsConnectionFactoryExtend"/>
    </bean>
    &lt;!&ndash; 监听注解支持 &ndash;&gt;
    <jms:annotation-driven />-->
    <!--<tx:annotation-driven  proxy-target-class="true" transaction-manager="transactionManager" />-->
</beans>